#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‚úÖ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô Translation Pipeline v3.0 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
- ‚úÖ –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç vLLM –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
- ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
- ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
- ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.exceptions import AirflowException, AirflowSkipException
import os
import json
import logging
import time
import re
from typing import Dict, Any, Optional, List

# –£—Ç–∏–ª–∏—Ç—ã
from shared_utils import (
    SharedUtils, NotificationUtils, ConfigUtils, 
    MetricsUtils, ErrorHandlingUtils
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DAG
DEFAULT_ARGS = {
    'owner': 'pdf-converter',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=3),
}

dag = DAG(
    'translation_pipeline',
    default_args=DEFAULT_ARGS,
    description='DAG 3: Translation Pipeline v3.0 - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
    schedule_interval=None,
    max_active_runs=2,
    catchup=False,
    tags=['pdf-converter', 'dag3', 'translation', 'chinese-docs', 'v3']
)

# ================================================================================
# –°–õ–û–í–ê–†–ò –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –ö–ò–¢–ê–ô–°–ö–ò–• –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –î–û–ö–£–ú–ï–ù–¢–û–í
# ================================================================================

# –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–ù–ï –ü–ï–†–ï–í–û–î–Ø–¢–°–Ø)
TECHNICAL_TERMS = {
    # –ë—Ä–µ–Ω–¥—ã (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
    "ÈóÆÂ§©": "WenTian",
    "ËÅîÊÉ≥ÈóÆÂ§©": "Lenovo WenTian",
    "Â§©Êìé": "ThinkSystem",
    "AnyBay": "AnyBay",
    
    # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    "Ëá≥Âº∫": "Xeon",
    "ÂèØÊâ©Â±ïÂ§ÑÁêÜÂô®": "Scalable Processors",
    "Ëã±ÁâπÂ∞î": "Intel",
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    "Â§ÑÁêÜÂô®": "Processor",
    "ÂÜÖÊ†∏": "Core", 
    "Á∫øÁ®ã": "Thread",
    "ÁùøÈ¢ë": "Turbo Boost",
    "ÂÜÖÂ≠ò": "Memory",
    "Â≠òÂÇ®": "Storage",
    "Á°¨Áõò": "Drive",
    "Âõ∫ÊÄÅÁ°¨Áõò": "SSD",
    "Êú∫Ê¢∞Á°¨Áõò": "HDD",
    "ÁÉ≠ÊèíÊãî": "Hot-swap",
    "ÂÜó‰Ωô": "Redundancy",
    "ËÉåÊùø": "Backplane",
    "ÊâòÊû∂": "Tray",
    "‰ª•Â§™ÁΩë": "Ethernet",
    "ÂÖâÁ∫§": "Fiber",
    "Â∏¶ÂÆΩ": "Bandwidth",
    "Âª∂Ëøü": "Latency",
    "ÁΩëÂç°": "Network Adapter",
    "Ëã±ÂØ∏": "inch",
    "Êú∫Êû∂": "Rack",
    "ÊèíÊßΩ": "Slot",
    "ËΩ¨Êé•Âç°": "Riser Card",
    "ÁîµÊ∫ê": "Power Supply",
    "ÈìÇÈáë": "Platinum",
    "ÈíõÈáë": "Titanium",
    "CRPS": "CRPS"
}

# –†—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
CHINESE_TO_RUSSIAN = {
    # –û–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    "ÊñáÊ°£": "–¥–æ–∫—É–º–µ–Ω—Ç",
    "ÊäÄÊúØ": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π",
    "ËßÑÊ†º": "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è",
    "ËØ¥Êòé": "–æ–ø–∏—Å–∞–Ω–∏–µ",
    "ÂÆâË£Ö": "—É—Å—Ç–∞–Ω–æ–≤–∫–∞",
    "ÈÖçÁΩÆ": "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
    "ÁÆ°ÁêÜ": "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "ÁõëÊéß": "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
    "Áª¥Êä§": "–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    "ÊïÖÈöú": "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å",
    "ÊéíÈô§": "—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ",
    "ÊÄßËÉΩ": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "‰ºòÂåñ": "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
    "ÂçáÁ∫ß": "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
    "ÂÖºÂÆπ": "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
    "ÊîØÊåÅ": "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    "Êé®Ëçê": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è",
    "Ë¶ÅÊ±Ç": "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
    "Ê≥®ÊÑè": "–≤–Ω–∏–º–∞–Ω–∏–µ",
    "Ë≠¶Âëä": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
    "ÈáçË¶Å": "–≤–∞–∂–Ω–æ",
    
    # –¶–∏—Ñ—Ä—ã –∏ –µ–¥–∏–Ω–∏—Ü—ã
    "‰∏™": "",  # —Å—á–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ
    "Âè∞": "—à—Ç.",
    "Â•ó": "–∫–æ–º–ø–ª–µ–∫—Ç",
    "Âè™": "—à—Ç.",
    "Êù°": "—à—Ç.",
    "Ê†π": "—à—Ç.",
    
    # –¢–∞–±–ª–∏—Ü—ã –∏ —Å–ø–∏—Å–∫–∏
    "Ë°®": "—Ç–∞–±–ª–∏—Ü–∞",
    "ÂàóË°®": "—Å–ø–∏—Å–æ–∫",
    "È°πÁõÆ": "—ç–ª–µ–º–µ–Ω—Ç",
    "ÈÄâÈ°π": "–æ–ø—Ü–∏—è",
    "ÂèÇÊï∞": "–ø–∞—Ä–∞–º–µ—Ç—Ä",
    "ÂÄº": "–∑–Ω–∞—á–µ–Ω–∏–µ",
    "ÈªòËÆ§": "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
    "ÂèØÈÄâ": "–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ",
    "ÂøÖÈ°ª": "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
    
    # –î–µ–π—Å—Ç–≤–∏—è
    "ÁÇπÂáª": "–Ω–∞–∂–º–∏—Ç–µ",
    "ÈÄâÊã©": "–≤—ã–±–µ—Ä–∏—Ç–µ",  
    "ËæìÂÖ•": "–≤–≤–µ–¥–∏—Ç–µ",
    "Á°ÆËÆ§": "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ",
    "ÂèñÊ∂à": "–æ—Ç–º–µ–Ω–∏—Ç–µ",
    "‰øùÂ≠ò": "—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ",
    "Âà†Èô§": "—É–¥–∞–ª–∏—Ç–µ",
    "‰øÆÊîπ": "–∏–∑–º–µ–Ω–∏—Ç–µ",
    "Ê∑ªÂä†": "–¥–æ–±–∞–≤—å—Ç–µ",
    "ÁßªÈô§": "—É–¥–∞–ª–∏—Ç–µ"
}

# –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
CHINESE_TO_ENGLISH = {
    # –û–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    "ÊñáÊ°£": "document",
    "ÊäÄÊúØ": "technical",
    "ËßÑÊ†º": "specification",
    "ËØ¥Êòé": "description",
    "ÂÆâË£Ö": "installation",
    "ÈÖçÁΩÆ": "configuration",
    "ÁÆ°ÁêÜ": "management",
    "ÁõëÊéß": "monitoring", 
    "Áª¥Êä§": "maintenance",
    "ÊïÖÈöú": "fault",
    "ÊéíÈô§": "troubleshooting",
    "ÊÄßËÉΩ": "performance",
    "‰ºòÂåñ": "optimization",
    "ÂçáÁ∫ß": "upgrade",
    "ÂÖºÂÆπ": "compatibility",
    "ÊîØÊåÅ": "support",
    "Êé®Ëçê": "recommended",
    "Ë¶ÅÊ±Ç": "requirements",
    "Ê≥®ÊÑè": "note",
    "Ë≠¶Âëä": "warning",
    "ÈáçË¶Å": "important",
    
    # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    "‰∏™": "",
    "Âè∞": "units",
    "Â•ó": "set",
    "Âè™": "piece",
    "Êù°": "item",
    "Ê†π": "piece",
    
    # –¢–∞–±–ª–∏—Ü—ã –∏ —Å–ø–∏—Å–∫–∏
    "Ë°®": "table",
    "ÂàóË°®": "list", 
    "È°πÁõÆ": "item",
    "ÈÄâÈ°π": "option",
    "ÂèÇÊï∞": "parameter",
    "ÂÄº": "value",
    "ÈªòËÆ§": "default",
    "ÂèØÈÄâ": "optional",
    "ÂøÖÈ°ª": "required",
    
    # –î–µ–π—Å—Ç–≤–∏—è
    "ÁÇπÂáª": "click",
    "ÈÄâÊã©": "select",
    "ËæìÂÖ•": "enter",
    "Á°ÆËÆ§": "confirm",
    "ÂèñÊ∂à": "cancel",
    "‰øùÂ≠ò": "save",
    "Âà†Èô§": "delete",
    "‰øÆÊîπ": "modify",
    "Ê∑ªÂä†": "add",
    "ÁßªÈô§": "remove"
}

# ================================================================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–í–û–î–ê
# ================================================================================

def initialize_translation(**context) -> Dict[str, Any]:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    start_time = time.time()
    
    try:
        dag_run_conf = context['dag_run'].conf or {}
        logger.info(f"üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: {json.dumps(dag_run_conf, indent=2, ensure_ascii=False)}")

        # –ù–æ–≤–æ–µ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ Stage 3 –ø–æ —Ñ–ª–∞–≥—É
        if dag_run_conf.get('skip_stage3', False):
            raise AirflowSkipException("Stage 3 skipped by orchestrator (no translation required)")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ Markdown —Ñ–∞–π–ª–∞
        markdown_file = dag_run_conf.get('markdown_file')
        if not markdown_file or not os.path.exists(markdown_file):
            raise ValueError(f"Markdown —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {markdown_file}")
        
        # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        with open(markdown_file, 'r', encoding='utf-8') as f:
            markdown_content = f.read()
        
        if not markdown_content.strip():
            raise ValueError("–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
        
        original_config = dag_run_conf.get('original_config', {})
        target_language = original_config.get('target_language', 'ru')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
        translation_session = {
            'session_id': f"translation_{int(time.time())}",
            'source_language': 'zh-CN',
            'target_language': target_language,
            'markdown_content': markdown_content,
            'markdown_file': markdown_file,
            'original_config': original_config,
            'preserve_technical_terms': dag_run_conf.get('preserve_technical_terms', True),
            'chinese_source': dag_run_conf.get('chinese_source', True),
            'lines_total': len(markdown_content.split('\n')),
            'processing_start_time': datetime.now().isoformat()
        }
        
        MetricsUtils.record_processing_metrics(
            dag_id='translation_pipeline',
            task_id='initialize_translation',
            processing_time=time.time() - start_time,
            success=True
        )
        
        logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {target_language} ({translation_session['lines_total']} —Å—Ç—Ä–æ–∫)")
        return translation_session
        
    except Exception as e:
        MetricsUtils.record_processing_metrics(
            dag_id='translation_pipeline',
            task_id='initialize_translation',
            processing_time=time.time() - start_time,
            success=False
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        raise

def perform_translation(**context) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    start_time = time.time()
    session = context['task_instance'].xcom_pull(task_ids='initialize_translation')
    
    try:
        markdown_content = session['markdown_content']
        target_language = session['target_language']
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_language}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞
        if target_language == 'ru':
            translation_dict = CHINESE_TO_RUSSIAN
        elif target_language == 'en':
            translation_dict = CHINESE_TO_ENGLISH
        else:
            # –î–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            logger.warning(f"–Ø–∑—ã–∫ {target_language} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
            translation_dict = {}
        
        if target_language == 'original' or target_language == 'zh':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∏—Ç–∞–π—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            translated_content = markdown_content
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            translated_content = translate_content(
                markdown_content, 
                translation_dict, 
                target_language,
                session.get('preserve_technical_terms', True)
            )
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        final_content = post_process_translation(translated_content, target_language)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = validate_translation_quality(
            markdown_content, 
            final_content, 
            target_language
        )
        
        translation_results = {
            'translated_content': final_content,
            'source_length': len(markdown_content),
            'translated_length': len(final_content),
            'quality_score': quality_score,
            'translation_stats': {
                'processing_time_seconds': time.time() - start_time,
                'translation_method': 'builtin_dictionary_v3',
                'chinese_chars_remaining': count_chinese_characters(final_content),
                'technical_terms_preserved': count_preserved_technical_terms(final_content)
            }
        }
        
        MetricsUtils.record_processing_metrics(
            dag_id='translation_pipeline',
            task_id='perform_translation',
            processing_time=time.time() - start_time,
            success=True
        )
        
        logger.info(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score:.1f}%")
        return translation_results
        
    except Exception as e:
        MetricsUtils.record_processing_metrics(
            dag_id='translation_pipeline',
            task_id='perform_translation',
            processing_time=time.time() - start_time,
            success=False
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        raise

def translate_content(content: str, translation_dict: Dict[str, str], target_lang: str, preserve_terms: bool = True) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        if preserve_terms:
            for chinese_term, english_term in TECHNICAL_TERMS.items():
                if chinese_term in content:
                    # –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ç–∞–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏
                    content = content.replace(chinese_term, english_term)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞
        for chinese_phrase, translation in translation_dict.items():
            if chinese_phrase in content and translation:
                content = content.replace(chinese_phrase, translation)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        content = translate_chinese_headings(content, target_lang)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
        content = translate_table_content(content, translation_dict)
        
        return content
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return content

def translate_chinese_headings(content: str, target_lang: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ –∫–∏—Ç–∞–π—Å–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    try:
        lines = content.split('\n')
        translated_lines = []
        
        heading_translations = {
            'ru': {
                'Á¨¨': '–ì–ª–∞–≤–∞',
                'Á´†': '',
                'ËäÇ': '–†–∞–∑–¥–µ–ª',
                'ÈÉ®ÂàÜ': '–ß–∞—Å—Ç—å',
                'Ê¶ÇËø∞': '–û–±–∑–æ—Ä',
                '‰ªãÁªç': '–í–≤–µ–¥–µ–Ω–∏–µ',
                'ÊÄªÁªì': '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ',
                'ÈôÑÂΩï': '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
            },
            'en': {
                'Á¨¨': 'Chapter',
                'Á´†': '',
                'ËäÇ': 'Section',
                'ÈÉ®ÂàÜ': 'Part',
                'Ê¶ÇËø∞': 'Overview',
                '‰ªãÁªç': 'Introduction',
                'ÊÄªÁªì': 'Summary',
                'ÈôÑÂΩï': 'Appendix'
            }
        }
        
        translations = heading_translations.get(target_lang, {})
        
        for line in lines:
            if line.strip().startswith('#'):
                # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                for chinese, translation in translations.items():
                    if chinese in line and translation:
                        line = line.replace(chinese, translation)
            
            translated_lines.append(line)
        
        return '\n'.join(translated_lines)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
        return content

def translate_table_content(content: str, translation_dict: Dict[str, str]) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü"""
    try:
        lines = content.split('\n')
        translated_lines = []
        
        for line in lines:
            if '|' in line and len(line.split('|')) >= 3:
                # –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã - –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–µ–∫
                cells = line.split('|')
                translated_cells = []
                
                for cell in cells:
                    cell_content = cell.strip()
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —è—á–µ–µ–∫
                    for chinese, translation in translation_dict.items():
                        if chinese in cell_content and translation:
                            cell_content = cell_content.replace(chinese, translation)
                    translated_cells.append(cell_content)
                
                line = '|'.join(translated_cells)
            
            translated_lines.append(line)
        
        return '\n'.join(translated_lines)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return content

def post_process_translation(content: str, target_lang: str) -> str:
    """–ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        content = re.sub(r'\n\s*\n\s*\n+', '\n\n', content)
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        if target_lang == 'ru':
            # –ó–∞–º–µ–Ω–∞ —Ç–æ—á–µ–∫ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
            content = re.sub(r'\.([–ê-–Ø])', r'. \1', content)
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫
            content = content.replace('"', '¬´').replace('"', '¬ª')
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö
        content = re.sub(r'\(\s*([A-Za-z0-9]+)\s*\)', r' (\1)', content)
        
        return content.strip()
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return content

def validate_translation_quality(original: str, translated: str, target_lang: str) -> float:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        quality_score = 100.0
        
        # –î–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
        if target_lang in ['original', 'zh']:
            return 100.0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        length_ratio = len(translated) / max(len(original), 1)
        if length_ratio < 0.5 or length_ratio > 2.0:
            quality_score -= 15
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        preserved_terms = count_preserved_technical_terms(translated)
        original_terms = count_chinese_technical_terms(original)
        
        if original_terms > 0:
            term_preservation = min(1.0, preserved_terms / original_terms)
            quality_score += term_preservation * 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–∞–±–ª–∏—Ü—ã)
        original_headers = len(re.findall(r'^#+\s', original, re.MULTILINE))
        translated_headers = len(re.findall(r'^#+\s', translated, re.MULTILINE))
        
        if original_headers > 0:
            header_preservation = translated_headers / original_headers
            if header_preservation < 0.9:
                quality_score -= 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤ –ø–µ—Ä–µ–≤–æ–¥–µ)
        chinese_remaining = count_chinese_characters(translated)
        chinese_original = count_chinese_characters(original)
        
        if chinese_original > 0:
            chinese_reduction = 1 - (chinese_remaining / chinese_original)
            quality_score += chinese_reduction * 20
        
        return max(0, min(100, quality_score))
        
    except Exception:
        return 75.0  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def count_chinese_characters(text: str) -> int:
    """–ü–æ–¥—Å—á–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return len(re.findall(r'[\u4e00-\u9fff]', text))

def count_preserved_technical_terms(text: str) -> int:
    """–ü–æ–¥—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
    count = 0
    for term in TECHNICAL_TERMS.values():
        count += text.count(term)
    return count

def count_chinese_technical_terms(text: str) -> int:
    """–ü–æ–¥—Å—á–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
    count = 0
    for term in TECHNICAL_TERMS.keys():
        count += text.count(term)
    return count

def save_translation_result(**context) -> Dict[str, Any]:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    start_time = time.time()
    
    try:
        session = context['task_instance'].xcom_pull(task_ids='initialize_translation')
        translation_results = context['task_instance'].xcom_pull(task_ids='perform_translation')
        
        original_config = session['original_config']
        target_language = session['target_language']
        timestamp = original_config.get('timestamp', int(time.time()))
        filename = original_config.get('filename', 'unknown.pdf')
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_dir = f"/app/output/{target_language}"
        os.makedirs(output_dir, exist_ok=True)
        
        translated_filename = f"{timestamp}_{filename.replace('.pdf', '.md')}"
        output_path = f"{output_dir}/{translated_filename}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(translation_results['translated_content'])
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Stage 4
        stage4_config = {
            'translated_file': output_path,
            'translated_content': translation_results['translated_content'],
            'original_config': original_config,
            'stage3_completed': True,
            'translation_metadata': {
                'target_language': target_language,
                'quality_score': translation_results['quality_score'],
                'translation_method': 'builtin_dictionary_v3',
                'chinese_chars_remaining': translation_results['translation_stats']['chinese_chars_remaining'],
                'technical_terms_preserved': translation_results['translation_stats']['technical_terms_preserved'],
                'completion_time': datetime.now().isoformat()
            }
        }
        
        MetricsUtils.record_processing_metrics(
            dag_id='translation_pipeline',
            task_id='save_translation_result',
            processing_time=time.time() - start_time,
            success=True
        )
        
        logger.info(f"üíæ –ü–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        return stage4_config
        
    except Exception as e:
        MetricsUtils.record_processing_metrics(
            dag_id='translation_pipeline',
            task_id='save_translation_result',
            processing_time=time.time() - start_time,
            success=False
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        raise

def notify_translation_completion(**context) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        stage4_config = context['task_instance'].xcom_pull(task_ids='save_translation_result')
        translation_metadata = stage4_config['translation_metadata']
        
        target_language = translation_metadata['target_language']
        quality_score = translation_metadata['quality_score']
        chinese_remaining = translation_metadata['chinese_chars_remaining']
        tech_terms = translation_metadata['technical_terms_preserved']
        
        message = f"""
‚úÖ TRANSLATION PIPELINE –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û

üåê –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫: {target_language}
üéØ –ö–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {quality_score:.1f}%
üà∂ –ö–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {chinese_remaining}
üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {tech_terms}
üìä –ú–µ—Ç–æ–¥: {translation_metadata['translation_method']}
üìÅ –§–∞–π–ª: {stage4_config['translated_file']}

‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –Ω–∞ Stage 4 (Quality Assurance)
        """
        
        logger.info(message)
        NotificationUtils.send_success_notification(context, stage4_config)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# ================================================================================
# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–î–ê–ß
# ================================================================================

# –ó–∞–¥–∞—á–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
init_translation = PythonOperator(
    task_id='initialize_translation',
    python_callable=initialize_translation,
    execution_timeout=timedelta(minutes=5),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
perform_translation_task = PythonOperator(
    task_id='perform_translation',
    python_callable=perform_translation,
    execution_timeout=timedelta(minutes=20),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
save_result = PythonOperator(
    task_id='save_translation_result',
    python_callable=save_translation_result,
    execution_timeout=timedelta(minutes=5),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
notify_completion = PythonOperator(
    task_id='notify_translation_completion',
    python_callable=notify_translation_completion,
    trigger_rule='all_done',
    execution_timeout=timedelta(minutes=2),
    dag=dag
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
init_translation >> perform_translation_task >> save_result >> notify_completion

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def handle_translation_failure(context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    try:
        failed_task = context['task_instance'].task_id
        exception = context.get('exception')
        
        error_message = f"""
üî• –û–®–ò–ë–ö–ê –í TRANSLATION PIPELINE

–ó–∞–¥–∞—á–∞: {failed_task}
–û—à–∏–±–∫–∞: {str(exception) if exception else 'Unknown'}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Markdown —Ñ–∞–π–ª –æ—Ç Stage 2
2. –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
4. –û—à–∏–±–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—è—Ö –ø–µ—Ä–µ–≤–æ–¥–∞

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        """
        
        logger.error(error_message)
        NotificationUtils.send_failure_notification(context, exception)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
for task in dag.tasks:
    task.on_failure_callback = handle_translation_failure
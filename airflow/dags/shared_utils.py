#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π shared_utils.py —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —É—Ç–∏–ª–∏—Ç–∞–º–∏ –¥–ª—è vLLM (Qwen-VL —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, health-check, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ).
"""

import os
import json
import logging
import hashlib
import time
from datetime import datetime
from typing import Dict, Any, Optional, List, Union
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class SharedUtils:
    """–û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""

    @staticmethod
    def validate_input_file(file_path: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        try:
            if not file_path or not isinstance(file_path, str):
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
                return False

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–æ—Å—Ç-–ø—É—Ç—å –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–º—É –ø—Ä–µ—Ñ–∏–∫—Å—É
            # /mnt/storage/apps/pdf-converter/* -> /app/*
            try:
                if isinstance(file_path, str) and file_path.startswith('/mnt/storage/apps/pdf-converter/'):
                    file_path = file_path.replace('/mnt/storage/apps/pdf-converter/', '/app/', 1)
            except Exception:
                pass

            path = Path(file_path)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not path.exists():
                logger.error(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if not path.is_file():
                logger.error(f"–ü—É—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ –Ω–∞ —Ñ–∞–π–ª: {file_path}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            if path.suffix.lower() != '.pdf':
                logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {path.suffix}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            file_size = path.stat().st_size
            if file_size == 0:
                logger.error("–§–∞–π–ª –ø—É—Å—Ç–æ–π")
                return False
            if file_size > 500 * 1024 * 1024:  # 500MB
                logger.error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / (1024*1024):.2f} MB")
                return False

            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PDF –∑–∞–≥–æ–ª–æ–≤–∫–∞
            try:
                with open(file_path, 'rb') as f:
                    header = f.read(8)
                    if not header.startswith(b'%PDF-'):
                        logger.error("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º PDF")
                        return False
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                return False

            logger.info(f"–§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {file_path} ({file_size / (1024*1024):.2f} MB)")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False

    @staticmethod
    def calculate_file_hash(file_path: str, algorithm: str = 'md5') -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
        try:
            hash_algo = hashlib.new(algorithm)
            with open(file_path, 'rb') as f:
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —á–∞—Å—Ç—è–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                for chunk in iter(lambda: f.read(8192), b''):
                    hash_algo.update(chunk)
            return hash_algo.hexdigest()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return 'error'

    @staticmethod
    def ensure_directory(directory_path: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            Path(directory_path).mkdir(parents=True, exist_ok=True)
            return True
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {directory_path}: {e}")
            return False


class ConfigUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""

    @staticmethod
    def get_processing_paths() -> Dict[str, str]:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –ø—É—Ç–∏, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–µ —á–µ—Ä–µ–∑ env
        base_path = os.getenv('PROCESSING_BASE_PATH', '/app')
        paths = {
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: UPLOAD_FOLDER -> INPUT_DIR -> /app/input
            'input_pdf': os.getenv('UPLOAD_FOLDER') or os.getenv('INPUT_DIR', os.path.join(base_path, 'input')),
            # Temp –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º Airflow: AIRFLOW_TEMP_DIR -> /opt/airflow/temp
            'temp_dir': os.getenv('AIRFLOW_TEMP_DIR', os.path.join(os.getenv('AIRFLOW_HOME', '/opt/airflow'), 'temp')),
            # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥: OUTPUT_DIR -> /app/output/zh (stage2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é zh)
            'output_md': os.getenv('OUTPUT_DIR', os.path.join(base_path, 'output/zh')),
            'logs': os.path.join(base_path, 'logs'),
            'work_dir': os.getenv('WORK_DIR', '/tmp/document_processor'),
        }

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for _path_type, path in paths.items():
            SharedUtils.ensure_directory(path)

        return paths

    @staticmethod
    def get_service_urls() -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL —Å–µ—Ä–≤–∏—Å–æ–≤"""
        return {
            'document_processor': os.getenv('DOCUMENT_PROCESSOR_URL', 'http://document-processor:8001'),
            'translator': os.getenv('TRANSLATOR_URL', 'http://translator:8002'),
            'quality_assurance': os.getenv('QUALITY_ASSURANCE_URL', 'http://quality-assurance:8002'),
            'airflow': os.getenv('AIRFLOW_URL', 'http://localhost:8080'),
        }


class MetricsUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫"""

    @staticmethod
    def record_processing_metrics(
        dag_id: str,
        task_id: str,
        processing_time: float,
        success: bool,
        pages_count: int = 0,
        file_size_mb: float = 0.0,
        **kwargs
    ) -> None:
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            metrics_data: Dict[str, Any] = {
                'dag_id': dag_id,
                'task_id': task_id,
                'processing_time_seconds': processing_time,
                'pages_processed': pages_count,
                'file_size_mb': file_size_mb,
                'success': success,
                'timestamp': datetime.now().isoformat(),
                **kwargs,
            }

            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: {metrics_data}")

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ StatsD/Prometheus
            statsd_host = os.getenv('STATSD_HOST')
            if statsd_host:
                MetricsUtils._send_to_statsd(metrics_data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: {e}")

    @staticmethod
    def _send_to_statsd(metrics_data: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤ StatsD (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            import socket

            statsd_host = os.getenv('STATSD_HOST', 'localhost')
            statsd_port = int(os.getenv('STATSD_PORT', 8125))

            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ UDP –ø–∞–∫–µ—Ç–∞
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ StatsD —Ñ–æ—Ä–º–∞—Ç–µ
            dag_id = metrics_data.get('dag_id', 'unknown')
            task_id = metrics_data.get('task_id', 'unknown')
            processing_time = metrics_data.get('processing_time_seconds', 0)
            success = 1 if metrics_data.get('success') else 0

            metrics = [
                f"pdf_converter.{dag_id}.{task_id}.processing_time:{processing_time}|ms",
                f"pdf_converter.{dag_id}.{task_id}.success:{success}|c",
                f"pdf_converter.{dag_id}.{task_id}.pages:{metrics_data.get('pages_processed', 0)}|g",
            ]

            for metric in metrics:
                sock.sendto(metric.encode(), (statsd_host, statsd_port))
            sock.close()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ StatsD: {e}")


class NotificationUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    @staticmethod
    def send_success_notification(context: Dict[str, Any], result: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            message = f"""
‚úÖ –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï
DAG: {context.get('dag_run', {}).dag_id if hasattr(context.get('dag_run', {}), 'dag_id') else 'unknown'}
Task: {context.get('task_instance', {}).task_id if hasattr(context.get('task_instance', {}), 'task_id') else 'unknown'}
–í—Ä–µ–º—è: {datetime.now().isoformat()}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('message', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')}
"""
            logger.info(message)
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack/Teams/Email
            NotificationUtils._send_external_notification(message, 'success')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    @staticmethod
    def send_failure_notification(context: Dict[str, Any], exception: Exception) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            message = f"""
‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø
DAG: {context.get('dag_run', {}).dag_id if hasattr(context.get('dag_run', {}), 'dag_id') else 'unknown'}
Task: {context.get('task_instance', {}).task_id if hasattr(context.get('task_instance', {}), 'task_id') else 'unknown'}
–í—Ä–µ–º—è: {datetime.now().isoformat()}
–û—à–∏–±–∫–∞: {str(exception)}
"""
            logger.error(message)
            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack/Teams/Email
            NotificationUtils._send_external_notification(message, 'error')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

    @staticmethod
    def _send_external_notification(message: str, notification_type: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (Slack, Teams, etc.)"""
        try:
            webhook_url = os.getenv('NOTIFICATION_WEBHOOK_URL')
            if not webhook_url:
                return

            import requests  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

            payload = {
                'text': message,
                'type': notification_type,
                'timestamp': datetime.now().isoformat(),
            }

            response = requests.post(
                webhook_url,
                json=payload,
                timeout=10,
                headers={'Content-Type': 'application/json'}
            )

            if response.status_code == 200:
                logger.info("–í–Ω–µ—à–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"–í–Ω–µ—à–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.status_code}")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


class ErrorHandlingUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""

    @staticmethod
    def handle_processing_error(
        context: Dict[str, Any],
        error: Exception,
        stage: str = "unknown"
    ) -> None:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        try:
            error_info: Dict[str, Any] = {
                'stage': stage,
                'error_type': type(error).__name__,
                'error_message': str(error),
                'timestamp': datetime.now().isoformat(),
            }

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
            if "TableData is not JSON serializable" in str(error):
                error_info['category'] = 'serialization_error'
                error_info['suggested_action'] = 'disable_table_extraction'
                logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –±–µ–∑ extract_tables")
            elif "Permission denied" in str(error):
                error_info['category'] = 'permission_error'
                error_info['suggested_action'] = 'check_file_permissions'
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            elif "No such file or directory" in str(error):
                error_info['category'] = 'file_not_found'
                error_info['suggested_action'] = 'verify_file_path'
                logger.error("–§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            elif "Connection" in str(error) or "timeout" in str(error).lower():
                error_info['category'] = 'network_error'
                error_info['suggested_action'] = 'retry_with_backoff'
                logger.error("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç")
            else:
                error_info['category'] = 'general_error'
                error_info['suggested_action'] = 'investigate_logs'
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ [{stage}]: {error_info}")

            # –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –æ–± –æ—à–∏–±–∫–µ
            MetricsUtils.record_processing_metrics(
                dag_id=context.get('dag_run', {}).dag_id if hasattr(context.get('dag_run', {}), 'dag_id') else 'unknown',
                task_id=context.get('task_instance', {}).task_id if hasattr(context.get('task_instance', {}), 'task_id') else 'unknown',
                processing_time=0,
                success=False,
                error_category=error_info['category'],
                error_type=error_info['error_type']
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            NotificationUtils.send_failure_notification(context, error)
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")


class VLLMUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å vLLM API –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π Qwen-VL"""

    @staticmethod
    def format_qwen_vl_message(prompt: str, role: str = "user") -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Qwen2.5-VL
        –≤ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ vLLM: content –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π.
        """
        return {
            "role": role,
            "content": [{"type": "text", "text": prompt}],
        }

    @staticmethod
    def is_vllm_available(endpoint: str, timeout: float = 5.0) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ vLLM —Å–µ—Ä–≤–∏—Å–∞.
        –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º /health (–µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ), –∑–∞—Ç–µ–º /v1/models.
        """
        try:
            import requests  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

            base = endpoint
            # –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Ç—å –¥–æ /v1/...
            if '/v1/' in base:
                base = base.split('/v1/')

            # –ü–æ–ø—ã—Ç–∫–∞ /health
            try:
                resp = requests.get(f"{base}/health", timeout=timeout)
                if resp.status_code == 200:
                    return True
            except Exception:
                pass

            # –ü–æ–ø—ã—Ç–∫–∞ /v1/models
            try:
                resp = requests.get(f"{base}/v1/models", timeout=timeout)
                return resp.status_code == 200
            except Exception:
                return False
        except Exception:
            return False

    @staticmethod
    def log_vllm_error(response: Any, context: str = "") -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ vLLM —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç—ã—Ö –∫–æ–¥–æ–≤ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º.
        """
        try:
            status = getattr(response, "status_code", None)
            text_preview = ""
            try:
                text_preview = response.text[:200] if hasattr(response, "text") else ""
            except Exception:
                text_preview = ""

            if status == 500:
                logger.error(f"vLLM 500 –≤ {context}: internal error (–≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ payload). {text_preview}")
            elif status == 503:
                logger.warning(f"vLLM 503 –≤ {context}: service overloaded/unavailable. {text_preview}")
            elif status == 429:
                logger.warning(f"vLLM 429 –≤ {context}: rate limited. {text_preview}")
            else:
                logger.error(f"vLLM {status} –≤ {context}: {text_preview}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É vLLM ({context}): {e}")


def _initialize_shared_utils() -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è shared_utils"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        paths = ConfigUtils.get_processing_paths()
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—É—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {list(paths.keys())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤
        services = ConfigUtils.get_service_urls()
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã URL —Å–µ—Ä–≤–∏—Å–æ–≤: {list(services.keys())}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ shared_utils: {e}")
        return False


# –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
_initialization_success = _initialize_shared_utils()
if not _initialization_success:
    logger.warning("shared_utils –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

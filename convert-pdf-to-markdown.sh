#!/bin/bash

# ===============================================================================
# PDF CONVERTER PIPELINE v2.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê JSON –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø
# –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ Markdown —Å 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
# –†–µ–∑—É–ª—å—Ç–∞—Ç: PDF ‚Üí Markdown —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 100% –≤ –ø–∞–ø–∫–µ output_md_zh
# ===============================================================================

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/.env"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
AIRFLOW_URL="${AIRFLOW_BASE_URL_HOST:-http://localhost:8090}"
AIRFLOW_USERNAME="${AIRFLOW_USERNAME:-admin}"
AIRFLOW_PASSWORD="${AIRFLOW_PASSWORD:-admin}"

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
HOST_INPUT_DIR="${SCRIPT_DIR}/input"
HOST_OUTPUT_DIR="${SCRIPT_DIR}/output/zh"
HOST_METADATA_DIR="${SCRIPT_DIR}/output/metadata"
LOGS_DIR="${SCRIPT_DIR}/logs"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
CONVERSION_BACKEND="${CONVERSION_BACKEND:-local}"
CONVERTER_ENABLE_OCR_BOOL="${CONVERTER_ENABLE_OCR_BOOL:-false}"
LOCAL_ALLOW_OCR_FALLBACK="${LOCAL_ALLOW_OCR_FALLBACK:-false}"
LOCAL_EXPORT_RAW_TEXT="${LOCAL_EXPORT_RAW_TEXT:-false}"
LOCAL_OVERWRITE_OUTPUT="${LOCAL_OVERWRITE_OUTPUT:-false}"
LOCAL_CONVERTER_VERBOSE="${LOCAL_CONVERTER_VERBOSE:-false}"
LOCAL_OCR_LANGUAGES="${LOCAL_OCR_LANGUAGES:-eng}"
LOCAL_CONVERTER_MODULE="document_processor.local_converter"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$HOST_INPUT_DIR" "$HOST_OUTPUT_DIR" "$HOST_METADATA_DIR" "$LOGS_DIR"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
LOG_FILE="${LOGS_DIR}/conversion_$(date +%Y%m%d_%H%M%S)_$$.log"
touch "$LOG_FILE"

log_file_path() {
    echo "$LOG_FILE"
}

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${BLUE}[$timestamp]${NC} ${YELLOW}[$level]${NC} $message" | tee -a "$(log_file_path)" >&2
}

show_header() {
    echo -e "${BLUE}"
    echo "==============================================================================="
    echo " PDF CONVERTER PIPELINE v2.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ê JSON –ü–†–û–ë–õ–ï–ú–ê"
    echo "==============================================================================="
    echo -e "${NC}"
    echo "üéØ –¶–µ–ª—å: PDF ‚Üí Markdown —Å 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞"
    echo "üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $HOST_INPUT_DIR"
    echo "üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: $HOST_OUTPUT_DIR"
    echo "üîÑ –≠—Ç–∞–ø—ã:"
    echo " 1Ô∏è‚É£ Document Preprocessing (–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)"
    echo " 2Ô∏è‚É£ Content Transformation (–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Markdown)"
    echo " 3Ô∏è‚É£ Quality Assurance (5-—É—Ä–æ–≤–Ω–µ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)"
    echo ""
    echo "‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: $CONVERSION_BACKEND"
    if [[ "$CONVERSION_BACKEND" == "local" ]]; then
        echo "   ‚û§ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π Docling –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –±–µ–∑ OCR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    else
        echo "   ‚û§ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Airflow –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"
    fi
    echo ""
}

check_services() {
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    local services=(
        "$AIRFLOW_URL/health:Airflow UI"
    )

    for service_info in "${services[@]}"; do
        local url="${service_info%:*}"
        local name="${service_info#*:}"
        if curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$url" > /dev/null 2>&1; then
            log "INFO" "‚úÖ $name –≥–æ—Ç–æ–≤"
        else
            # Fallback –Ω–∞ Airflow API v2 health endpoint
            local base="${url%/health}"
            local v2="${base}/api/v2/monitor/health"
            if ! curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$v2" > /dev/null 2>&1; then
                log "ERROR" "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $url"
                exit 1
            fi
            log "INFO" "‚úÖ $name –≥–æ—Ç–æ–≤ (—á–µ—Ä–µ–∑ API v2)"
        fi
    done

    log "INFO" "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"
}

run_local_conversion() {
    local pdf_file="$1"
    local filename
    filename=$(basename "$pdf_file")

    log "INFO" "üöÄ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: $filename"

    local converter_cmd=(
        python3 -m "$LOCAL_CONVERTER_MODULE"
        --input "$pdf_file"
        --output-dir "$HOST_OUTPUT_DIR"
        --metadata-dir "$HOST_METADATA_DIR"
        --ocr-languages "$LOCAL_OCR_LANGUAGES"
    )

    if [[ "$CONVERTER_ENABLE_OCR_BOOL" == "true" ]]; then
        converter_cmd+=(--enable-ocr)
        if [[ "$LOCAL_ALLOW_OCR_FALLBACK" == "true" ]]; then
            converter_cmd+=(--allow-ocr-fallback)
        fi
    else
        if [[ "$LOCAL_ALLOW_OCR_FALLBACK" == "true" ]]; then
            converter_cmd+=(--allow-ocr-fallback)
        fi
    fi

    if [[ "$LOCAL_EXPORT_RAW_TEXT" == "true" ]]; then
        converter_cmd+=(--export-raw-text)
    fi

    if [[ "$LOCAL_OVERWRITE_OUTPUT" == "true" ]]; then
        converter_cmd+=(--overwrite)
    fi

    if [[ "$LOCAL_CONVERTER_VERBOSE" == "true" ]]; then
        converter_cmd+=(--verbose)
    fi

    local converter_output
    if ! converter_output=$("${converter_cmd[@]}"); then
        local exit_code=$?
        log "ERROR" "‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ $exit_code)"
        log "ERROR" "–í—ã–≤–æ–¥: $converter_output"
        return $exit_code
    fi

    local status
    status=$(echo "$converter_output" | jq -r '.status // empty' 2>/dev/null || echo "")
    if [[ "$status" != "success" ]]; then
        log "ERROR" "‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: $converter_output"
        return 1
    fi

    local markdown_path
    markdown_path=$(echo "$converter_output" | jq -r '.output_markdown // empty')
    local metadata_path
    metadata_path=$(echo "$converter_output" | jq -r '.metadata_file // empty')
    local raw_text_path
    raw_text_path=$(echo "$converter_output" | jq -r '.raw_text_file // empty')
    local pages sections
    pages=$(echo "$converter_output" | jq -r '.pages // "0"')
    sections=$(echo "$converter_output" | jq -r '.sections // "0"')

    log "INFO" "üìÑ Markdown: ${markdown_path:-–Ω–µ —É–∫–∞–∑–∞–Ω}"
    if [[ -n "$metadata_path" ]]; then
        log "INFO" "üßæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: $metadata_path"
    fi
    if [[ -n "$raw_text_path" ]]; then
        log "INFO" "üìù –¢–µ–∫—Å—Ç: $raw_text_path"
    fi
    log "INFO" "üìä –°—Ç—Ä–∞–Ω–∏—Ü: $pages, —Å–µ–∫—Ü–∏–π: $sections"

    printf '%s\n' "$converter_output"
}

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —á–µ—Ä–µ–∑ jq
trigger_full_conversion() {
    local pdf_file="$1"
    local filename
    filename=$(basename "$pdf_file")
    local timestamp
    timestamp=$(date +%s)

    log "INFO" "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: $filename"
    local enable_ocr_flag="$CONVERTER_ENABLE_OCR_BOOL"
    if [[ "$enable_ocr_flag" == "true" ]]; then
        log "INFO" "‚öôÔ∏è OCR –≤–∫–ª—é—á–µ–Ω –≤–æ –≤—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    else
        log "INFO" "‚öôÔ∏è OCR –æ—Ç–∫–ª—é—á–µ–Ω –≤–æ –≤—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    fi

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º jq –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON
    local config_json
    config_json=$(jq -n \
        --arg input_file "$pdf_file" \
        --arg filename "$filename" \
        --argjson timestamp $timestamp \
        --arg target_language "original" \
        --arg quality_level "high" \
        --argjson enable_ocr "$enable_ocr_flag" \
        --argjson preserve_structure true \
        --argjson extract_tables true \
        --argjson extract_images true \
        --arg stage_mode "full_conversion_with_validation" \
        --argjson processing_stages 4 \
        --argjson validation_enabled true \
        --argjson quality_target 100.0 \
        --arg language "zh-CN" \
        --argjson chinese_optimization true \
        --arg pipeline_version "4.0" \
        --arg processing_mode "digital_pdf" \
        --argjson use_orchestrator true \
        '{
            input_file: $input_file,
            filename: $filename,
            timestamp: $timestamp,
            target_language: $target_language,
            quality_level: $quality_level,
            enable_ocr: $enable_ocr,
            preserve_structure: $preserve_structure,
            extract_tables: $extract_tables,
            extract_images: $extract_images,
            stage_mode: $stage_mode,
            processing_stages: $processing_stages,
            validation_enabled: $validation_enabled,
            quality_target: $quality_target,
            language: $language,
            chinese_optimization: $chinese_optimization,
            pipeline_version: $pipeline_version,
            processing_mode: $processing_mode,
            use_orchestrator: $use_orchestrator
        }')

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Airflow API
    local request_body
    request_body=$(jq -n --argjson conf "$config_json" '{conf: $conf}')

    log "INFO" "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Airflow..."
    #log "DEBUG" "JSON config: $config_json"

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ orchestrator —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º JSON
    local response
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "$request_body" \
        "$AIRFLOW_URL/api/v1/dags/orchestrator_dag/dagRuns")

    local http_code
    http_code=$(echo "$response" | tail -n1)
    local body
    body=$(echo "$response" | head -n -1)

    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id
        dag_run_id=$(echo "$body" | jq -r '.dag_run_id // "unknown"' 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞. Run ID: $dag_run_id"

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        wait_for_completion "$dag_run_id" "$filename"
        return 0
    else
        log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: HTTP $http_code"
        log "ERROR" "–û—Ç–≤–µ—Ç: $body"

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if [[ "$body" == *"not valid JSON"* ]]; then
            log "ERROR" "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É jq:"
            log "ERROR" "   sudo apt-get install jq"
        elif [[ "$body" == *"orchestrator_dag"* ]]; then
            log "ERROR" "üîß orchestrator_dag –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DAG –≤ Airflow UI:"
            log "ERROR" "   $AIRFLOW_URL/dags/orchestrator_dag"
        fi

        return 1
    fi
}

wait_for_completion() {
    local dag_run_id="$1"
    local filename="$2"
    local timeout=3600  # 1 —á–∞—Å
    local start_time
    start_time=$(date +%s)

    log "INFO" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (—Ç–∞–π–º–∞—É—Ç: ${timeout}s)..."

    while true; do
        local current_time
        current_time=$(date +%s)
        local elapsed=$((current_time - start_time))

        if [ $elapsed -gt $timeout ]; then
            log "ERROR" "‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
            return 1
        fi

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ orchestrator DAG
        local response
        response=$(curl -s \
            --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "$AIRFLOW_URL/api/v1/dags/orchestrator_dag/dagRuns/$dag_run_id")

        local state
        state=$(echo "$response" | jq -r '.state // "unknown"' 2>/dev/null || echo "error")

        case "$state" in
            "success")
                log "INFO" "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                show_completion_results "$filename"
                return 0
                ;;
            "failed"|"upstream_failed")
                log "ERROR" "‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π"
                log "ERROR" "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ Airflow UI: $AIRFLOW_URL/dags/orchestrator_dag/grid?dag_run_id=$dag_run_id"
                return 1
                ;;
            "running")
                local progress_msg="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (${elapsed}s)"
                printf "\r${YELLOW}[–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø]${NC} $progress_msg " >&2
                sleep 10
                ;;
            *)
                sleep 5
                ;;
        esac
    done
}

show_completion_results() {
    local filename="$1"

    log "INFO" "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"

    # –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    local latest_file
    latest_file=$(find "$HOST_OUTPUT_DIR" -name "*.md" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2- 2>/dev/null || echo "")

    if [ -n "$latest_file" ] && [ -f "$latest_file" ]; then
        log "INFO" "üìÅ –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª: $latest_file"
        local file_size
        file_size=$(wc -c < "$latest_file" 2>/dev/null || echo "0")
        log "INFO" "üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $file_size –±–∞–π—Ç"

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        local lines words
        lines=$(wc -l < "$latest_file" 2>/dev/null || echo "0")
        words=$(wc -w < "$latest_file" 2>/dev/null || echo "0")

        log "INFO" "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        log "INFO" "  - –°—Ç—Ä–æ–∫: $lines"
        log "INFO" "  - –°–ª–æ–≤: $words"
        log "INFO" "  - –°–∏–º–≤–æ–ª–æ–≤: $file_size"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (–±–∞–∑–æ–≤–∞—è)
        if [ "$file_size" -gt 100 ]; then
            log "INFO" "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
            log "INFO" "üìñ –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:"
            while IFS= read -r preview_line; do
                log "INFO" "  $preview_line"
            done < <(head -5 "$latest_file")
        else
            log "WARN" "‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ: –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º"
        fi
    else
        log "WARN" "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $HOST_OUTPUT_DIR"

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –Ω–µ–¥–∞–≤–Ω–∏–µ —Ñ–∞–π–ª—ã
        log "INFO" "üîç –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ..."
        find "$HOST_OUTPUT_DIR" -type f -name "*.md" -mmin -60 2>/dev/null | head -5 | while read -r file; do
            if [ -n "$file" ]; then
                log "INFO" "  –ù–∞–π–¥–µ–Ω: $file"
            fi
        done
    fi
}

process_batch() {
    log "INFO" "üîç –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏..."

    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
    local pdf_files=()
    while IFS= read -r -d '' file; do
        pdf_files+=("$file")
    done < <(find "$HOST_INPUT_DIR" -name "*.pdf" -type f -print0)

    local total_files=${#pdf_files[@]}

    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ $HOST_INPUT_DIR"
        log "INFO" "–ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É $HOST_INPUT_DIR –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞"
        return 0
    fi

    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: $total_files"
    >&2 echo ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    local processed=0
    local failed=0
    local start_time
    start_time=$(date +%s)
    local success_summaries=()

    for pdf_file in "${pdf_files[@]}"; do
        local filename
        filename=$(basename "$pdf_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename"

        if [[ "$CONVERSION_BACKEND" == "local" ]]; then
            local conversion_json
            if conversion_json=$(run_local_conversion "$pdf_file"); then
                ((processed++))
                success_summaries+=("$conversion_json")
                echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù${NC}"
            else
                ((failed++))
                echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò${NC}"
            fi
        else
            if trigger_full_conversion "$pdf_file"; then
                ((processed++))
                echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù${NC}"
            else
                ((failed++))
                echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò${NC}"
            fi
        fi
        >&2 echo ""
    done

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local end_time
    end_time=$(date +%s)
    local total_duration=$((end_time - start_time))

    {
        echo "==============================================================================="
        echo -e "${GREEN}–ü–û–õ–ù–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê${NC}"
        echo "==============================================================================="
        echo -e "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:"
        echo -e " –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${GREEN}$processed${NC} —Ñ–∞–π–ª–æ–≤"
        echo -e " –û—à–∏–±–æ–∫: ${RED}$failed${NC} —Ñ–∞–π–ª–æ–≤"
        echo -e " –û–±—â–µ–µ –≤—Ä–µ–º—è: ${BLUE}$total_duration${NC} —Å–µ–∫—É–Ω–¥"
        echo ""
        echo -e "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$HOST_OUTPUT_DIR${NC}"
        echo -e "üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$LOGS_DIR${NC}"
        echo ""
    } >&2

    if [ $failed -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:${NC}"
        if [[ "$CONVERSION_BACKEND" == "local" ]]; then
            echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞: $(log_file_path)"
            echo " - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ docling —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            echo " - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å LOCAL_CONVERTER_VERBOSE=true –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
        else
            echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Airflow UI: $AIRFLOW_URL/dags"
            echo " - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ orchestrator_dag –∞–∫—Ç–∏–≤–µ–Ω"
            echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $LOGS_DIR/conversion_*.log"
            echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö DAG –≤ –ø—Ä–æ–µ–∫—Ç–µ"
        fi
    else
        echo -e "${GREEN}üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!${NC}" >&2
        >&2 echo ""
        echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" >&2
        echo " - –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é" >&2
        echo " - –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ./translate-documents.sh [—è–∑—ã–∫]" >&2
    fi

    if [[ "$CONVERSION_BACKEND" == "local" && ${#success_summaries[@]} -gt 0 ]]; then
        >&2 echo ""
        echo "üìå –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:" >&2
        for summary in "${success_summaries[@]}"; do
            local md_path metadata_path raw_text_path
            md_path=$(echo "$summary" | jq -r '.output_markdown')
            metadata_path=$(echo "$summary" | jq -r '.metadata_file // empty')
            raw_text_path=$(echo "$summary" | jq -r '.raw_text_file // empty')
            echo " - Markdown: $md_path" >&2
            if [[ -n "$metadata_path" ]]; then
                echo "   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: $metadata_path" >&2
            fi
            if [[ -n "$raw_text_path" ]]; then
                echo "   –¢–µ–∫—Å—Ç: $raw_text_path" >&2
            fi
        done
        >&2 echo ""
        echo "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LOCAL_OVERWRITE_OUTPUT=true" >&2
    fi

    if [[ "$CONVERSION_BACKEND" == "local" && ${#success_summaries[@]} -gt 0 ]]; then
        echo ""
        echo "üìå –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
        for summary in "${success_summaries[@]}"; do
            local md_path metadata_path raw_text_path
            md_path=$(echo "$summary" | jq -r '.output_markdown')
            metadata_path=$(echo "$summary" | jq -r '.metadata_file // empty')
            raw_text_path=$(echo "$summary" | jq -r '.raw_text_file // empty')
            echo " - Markdown: $md_path"
            if [[ -n "$metadata_path" ]]; then
                echo "   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: $metadata_path"
            fi
            if [[ -n "$raw_text_path" ]]; then
                echo "   –¢–µ–∫—Å—Ç: $raw_text_path"
            fi
        done
        echo ""
        echo "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LOCAL_OVERWRITE_OUTPUT=true"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "INFO" "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ jq
    if ! command -v jq &> /dev/null; then
        log "ERROR" "‚ùå jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install jq"
        exit 1
    fi
    log "INFO" "‚úÖ jq —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    if [[ "$CONVERSION_BACKEND" == "local" ]]; then
        if ! command -v python3 &> /dev/null; then
            log "ERROR" "‚ùå Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python3"
            exit 1
        fi
        if ! python3 - >/dev/null 2>&1 <<'PY'; then
import importlib.util
required = ["docling", "docling_core"]
missing = [name for name in required if importlib.util.find_spec(name) is None]
if missing:
    raise SystemExit(1)
PY
            log "ERROR" "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ docling/docling_core. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"
            exit 1
        fi
        log "INFO" "‚úÖ Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"
    else
        if ! command -v curl &> /dev/null; then
            log "ERROR" "‚ùå curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install curl"
            exit 1
        fi
        log "INFO" "‚úÖ curl —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    show_header
    log "INFO" "–ó–∞–ø–∏—Å—å –ª–æ–≥–∞: $(log_file_path)"
    check_dependencies
    if [[ "$CONVERSION_BACKEND" == "local" ]]; then
        log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"
    else
        check_services
    fi

    if [[ "$CONVERSION_BACKEND" == "local" ]]; then
        echo -e "${YELLOW}–ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PDF ‚Üí Markdown (OCR –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)${NC}"
    else
        echo -e "${YELLOW}–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PDF ‚Üí Markdown —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π${NC}"
    fi
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...${NC}"
    read -r

    process_batch
}

# –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô OCR Processor –¥–ª—è PDF Converter Pipeline v4.0
‚úÖ –£–°–¢–†–ê–ù–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:
- –£—Å–ª–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ use_ocr —Ñ–ª–∞–≥–∞
- –ò–∑–±–µ–∂–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ use_ocr=False
"""

from typing import List, Dict, Any, Union, Optional
import logging
from pathlib import Path

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã OCR –¥–≤–∏–∂–∫–æ–≤
OCR_AVAILABLE = {}

try:
    import pytesseract
    OCR_AVAILABLE['tesseract'] = True
except ImportError:
    OCR_AVAILABLE['tesseract'] = False

try:
    from paddleocr import PaddleOCR
    OCR_AVAILABLE['paddleocr'] = True
except ImportError:
    OCR_AVAILABLE['paddleocr'] = False

# –î–ª—è PDF -> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
try:
    from pdf2image import convert_from_path
    import numpy as np
    from PIL import Image
    PDF_CONVERSION_AVAILABLE = True
except ImportError:
    PDF_CONVERSION_AVAILABLE = False

logger = logging.getLogger(__name__)


class OCRConfig:
    def __init__(
        self,
        use_gpu: bool = False,
        lang: Union[str, List[str]] = "ch",
        confidence_threshold: float = 0.8,
        enable_tesseract_cv: bool = True,
        pdf_dpi: int = 200,
    ):
        self.use_gpu = use_gpu
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ —Å—Ç—Ä–æ–∫—É "ch,en,ru"
        if isinstance(lang, str):
            if "," in lang:
                self.lang = [l.strip() for l in lang.split(",") if l.strip()]
            else:
                self.lang = [lang.strip()]
        else:
            self.lang = lang or ["ch"]
        self.confidence_threshold = float(confidence_threshold)
        self.enable_tesseract_cv = bool(enable_tesseract_cv)
        self.pdf_dpi = int(pdf_dpi)

    def __repr__(self):
        return (
            f"OCRConfig(use_gpu={self.use_gpu}, "
            f"lang={self.lang}, "
            f"confidence_threshold={self.confidence_threshold}, "
            f"enable_tesseract_cv={self.enable_tesseract_cv}, "
            f"pdf_dpi={self.pdf_dpi})"
        )


class OCRProcessor:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô OCR Processor —Å —É—Å–ª–æ–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, config: Optional[OCRConfig] = None):
        self.config = config or OCRConfig()
        logger.info("Initializing OCRProcessor with %s", self.config)

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR –¥–≤–∏–∂–∫–∏ –≤ __init__
        self.ocr_engines: Dict[str, Any] = {}
        self.supported_langs: List[str] = []
        self.engines_initialized = False
        
        # –ö–∞—Ä—Ç–∞ —è–∑—ã–∫–æ–≤ –¥–ª—è Tesseract
        self.tesseract_lang_map = {
            "ch": "chi_sim",
            "en": "eng",
            "ru": "rus",
        }
        
        logger.info("‚úÖ OCRProcessor —Å–æ–∑–¥–∞–Ω –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–æ–≤")

    def _initialize_engines_if_needed(self):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR –¥–≤–∏–∂–∫–æ–≤"""
        if self.engines_initialized:
            return
        
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR –¥–≤–∏–∂–∫–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é...")
        
        for lang in self.config.lang:
            if not OCR_AVAILABLE['paddleocr']:
                logger.warning(f"PaddleOCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ {lang}")
                continue
                
            try:
                logger.info("Initializing PaddleOCR for language: %s", lang)
                # PaddleOCR —Å–∞–º —Å–∫–∞—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                engine = PaddleOCR(
                    lang=lang,
                    use_textline_orientation=True,
                    show_log=False  # ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                )
                self.ocr_engines[lang] = engine
                self.supported_langs.append(lang)
                logger.info("PaddleOCR for %s initialized", lang)
            except Exception as e:
                logger.error("Failed to initialize PaddleOCR for %s: %s", lang, e)

        if not self.ocr_engines:
            raise RuntimeError("No PaddleOCR engines initialized for requested languages")
        
        self.engines_initialized = True
        logger.info("‚úÖ OCR –¥–≤–∏–∂–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: %s", list(self.ocr_engines.keys()))

    def _resolve_lang(self, lang: Optional[str]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —è–∑—ã–∫, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ –¥–≤–∏–∂–∫–µ."""
        if not self.engines_initialized:
            self._initialize_engines_if_needed()
            
        if not lang:
            return self.supported_langs[0] if self.supported_langs else "ch"
        if lang not in self.ocr_engines:
            fallback = self.supported_langs[0] if self.supported_langs else "ch"
            logger.warning("Requested lang '%s' not initialized, fallback to '%s'", lang, fallback)
            return fallback
        return lang

    def ocr_image(self, image_path: str, lang: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: OCR –ø–æ –ø—É—Ç–∏ –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        """
        try:
            # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
            if not self.engines_initialized:
                self._initialize_engines_if_needed()
            
            eff_lang = self._resolve_lang(lang)
            engine = self.ocr_engines[eff_lang]

            result = engine.ocr(image_path)
            output: List[Dict[str, Any]] = []

            # result ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ [(bbox, (text, conf)), ...]
            if result and len(result) > 0 and result[0]:
                for line in result[0]:
                    try:
                        bbox, (text, conf) = line
                        if conf >= self.config.confidence_threshold:
                            output.append(
                                {
                                    "text": text,
                                    "confidence": float(conf),
                                    "bbox": bbox,
                                    "engine": "paddle",
                                    "language": eff_lang,
                                }
                            )
                    except Exception as ie:
                        logger.debug("Skip malformed OCR line: %s (%s)", line, ie)

            # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è Tesseract (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if (self.config.enable_tesseract_cv and 
                eff_lang in self.tesseract_lang_map and 
                OCR_AVAILABLE['tesseract']):
                try:
                    t_lang = self.tesseract_lang_map[eff_lang]
                    t_text = pytesseract.image_to_string(image_path, lang=t_lang).strip()
                    if t_text:
                        output.append(
                            {
                                "text": t_text,
                                "confidence": 0.9,  # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
                                "bbox": None,
                                "engine": "tesseract",
                                "language": eff_lang,
                            }
                        )
                except Exception as te:
                    logger.debug("Tesseract failed for %s: %s", eff_lang, te)

            return output

        except Exception as e:
            logger.error("Error during OCR on %s (lang=%s): %s", image_path, lang, e)
            return []

    async def process_document_pages(
        self, 
        pdf_path: str, 
        work_dir: str, 
        lang: Optional[str] = None
    ) -> List[Dict[str, Any]]:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å main.py —Å —É—Å–ª–æ–≤–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π OCR
        """
        results: List[Dict[str, Any]] = []
        
        if not PDF_CONVERSION_AVAILABLE:
            logger.error("pdf2image –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return results
        
        # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR –¥–≤–∏–∂–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        if not self.engines_initialized:
            self._initialize_engines_if_needed()
            
        eff_lang = self._resolve_lang(lang)

        try:
            Path(work_dir).mkdir(parents=True, exist_ok=True)
            images = convert_from_path(pdf_path, self.config.pdf_dpi)
            
            for idx, pil_img in enumerate(images, start=1):
                img_path = Path(work_dir) / f"page_{idx}.png"
                pil_img.save(str(img_path))

                page_ocr = self.ocr_image(str(img_path), eff_lang)
                results.append(
                    {
                        "page": idx,
                        "language": eff_lang,
                        "ocr_results": page_ocr,
                        "image_path": str(img_path),
                        "text_count": len(page_ocr),
                    }
                )
        except Exception as e:
            logger.error("Error in process_document_pages: %s", e)

        return results

    def ocr_image_multilang(
        self, 
        image_path: str, 
        langs: Optional[List[str]] = None
    ) -> Dict[str, List[Dict[str, Any]]]:
        """OCR –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —è–∑—ã–∫–∞–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å lang -> —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤."""
        # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR –¥–≤–∏–∂–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
        if not self.engines_initialized:
            self._initialize_engines_if_needed()
            
        langs = langs or self.supported_langs
        results: Dict[str, List[Dict[str, Any]]] = {}
        
        for l in langs:
            if l in self.supported_langs:
                results[l] = self.ocr_image(image_path, l)
            else:
                logger.debug("Language %s not initialized, skip", l)
        return results

    @staticmethod
    def create_dummy_processor() -> 'OCRProcessor':
        """‚úÖ –§–∞–±—Ä–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR"""
        logger.info("–°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (OCR –æ—Ç–∫–ª—é—á–µ–Ω)")
        return OCRProcessor()

    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ OCR –¥–≤–∏–∂–∫–∏"""
        return self.engines_initialized

    def get_available_engines(self) -> Dict[str, bool]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö OCR –¥–≤–∏–∂–∫–∞—Ö"""
        return OCR_AVAILABLE.copy()
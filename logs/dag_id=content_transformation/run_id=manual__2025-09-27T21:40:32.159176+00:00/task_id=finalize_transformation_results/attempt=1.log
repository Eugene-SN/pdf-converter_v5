[2025-09-27T21:42:40.130+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: content_transformation.finalize_transformation_results manual__2025-09-27T21:40:32.159176+00:00 [queued]>
[2025-09-27T21:42:40.135+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: content_transformation.finalize_transformation_results manual__2025-09-27T21:40:32.159176+00:00 [queued]>
[2025-09-27T21:42:40.135+0000] {taskinstance.py:2170} INFO - Starting attempt 1 of 3
[2025-09-27T21:42:40.143+0000] {taskinstance.py:2191} INFO - Executing <Task(PythonOperator): finalize_transformation_results> on 2025-09-27 21:40:32.159176+00:00
[2025-09-27T21:42:40.148+0000] {standard_task_runner.py:60} INFO - Started process 444 to run task
[2025-09-27T21:42:40.150+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'content_transformation', 'finalize_transformation_results', 'manual__2025-09-27T21:40:32.159176+00:00', '--job-id', '917', '--raw', '--subdir', 'DAGS_FOLDER/content_transformation.py', '--cfg-path', '/tmp/tmp4h0y_y6h']
[2025-09-27T21:42:40.151+0000] {standard_task_runner.py:88} INFO - Job 917: Subtask finalize_transformation_results
[2025-09-27T21:42:40.192+0000] {task_command.py:423} INFO - Running <TaskInstance: content_transformation.finalize_transformation_results manual__2025-09-27T21:40:32.159176+00:00 [running]> on host 5135eb910334
[2025-09-27T21:42:40.255+0000] {taskinstance.py:2480} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='pdf-converter' AIRFLOW_CTX_DAG_ID='content_transformation' AIRFLOW_CTX_TASK_ID='finalize_transformation_results' AIRFLOW_CTX_EXECUTION_DATE='2025-09-27T21:40:32.159176+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-09-27T21:40:32.159176+00:00'
[2025-09-27T21:42:40.300+0000] {shared_utils.py:170} INFO - 📊 Метрики: {'dag_id': 'content_transformation', 'task_id': 'finalize_transformation_results', 'processing_time_seconds': 0.04446697235107422, 'pages_processed': 0, 'file_size_mb': 0.0, 'success': True, 'timestamp': '2025-09-27T21:42:40.300746'}
[2025-09-27T21:42:40.300+0000] {content_transformation.py:1080} INFO - 🎯 Трансформация финализирована: итоговое качество 100.0%
[2025-09-27T21:42:40.301+0000] {python.py:201} INFO - Done. Returned value was: {'session_id': 'transform_1759009233', 'transformation_completed': True, 'final_content': '# upload_1759009200_test_short\n\n## 命令列表\n\n| Command Name                                  | NetFn   | CMD   | Privilege   | 备注                                                                     |\n|-----------------------------------------------|---------|-------|-------------|--------------------------------------------------------------------------|\n| chassis status                                |         |       | User        | 获取当前服务器 (Server) 状态                                                   |\n| chassis restart_cause                         |         |       | User        | 获取服务器 (Server) 系统上次重启原因                                           |\n| chassis selftest                              |         |       | User        | 获取服务器 (Server) 系统自检结果                                               |\n| chassis policy always-on/previous/always-off  |         |       | operator    | 设置服务器 (Server) 系统电源 (Power Supply) 恢复策略为自动开机 / 恢复到断电前状态 / 保持关机状态 |\n| chassis bootdev {device}                      |         |       | operator    | 设置服务器 (Server) 的启动项                                                   |\n| power status                                  |         |       | User        | 获取服务器 (Server) 系统电源 (Power Supply) 当前状态                               |\n| power on/up                                   |         |       | operator    | 设置服务器 (Server) 开机                                                       |\n| power off/down                                |         |       | operator    | 设置服务器 (Server) 关机                                                       |\n| power reset                                   |         |       | operator    | 设置服务器 (Server) 重启                                                       |\n| mc info                                       |         |       | User        | 获取服务器 (Server) 管理系统各个模块信息                                       |\n| mc selftest                                   |         |       | User        | 获取服务器 (Server) 管理系统自检结果                                           |\n| mc reset cold                                 |         |       | Admin       | 设置服务器 (Server) 管理系统冷重启                                             |\n| sdr                                           |         |       | User        | 获取服务器 (Server) 所有传感器的部分信息                                         |\n| sensor list                                   |         |       | User        | 获取服务器 (Server) 所有传感器的详细参数信息                                     |\n| sensor get {sensor-name}                      |         |       | User        | 获取服务器 (Server) 指定传感器的详细信息                                         |\n| sensor thresh {sensor-name}                   |         |       | Admin       | 设置服务器 (Server) 指定传感器的阈值                                             |\n| sel                                           |         |       | User        | 获取系统日志信息                                                             |\n| sel elist                                     |         |       | User        | 获取系统详细日志记录                                                         |\n| fru                                           |         |       | User        | 获取现场可替换单元信息                                                       |\n| session info active                           |         |       | User        | 获取服务器 (Server) 管理系统当前活跃用户的会话信息                               |\n| User list                                     |         |       | User        | 获取所有用户信息                                                             |\n| User set name {User id} {Username}            |         |       | Admin       | 设置服务器 (Server) 管理系统新增用户名                                           |\n| User set password {User id} {password}        |         |       | Admin       | 设置服务器 (Server) 管理系统指定用户的密码                                       |\n| User test {User id} {16|20} {password}        |         |       | Admin       | 验证用户名密码的正确性                                                       |\n| User disable {User id}                        |         |       | Admin       | 关闭指定用户的服务器 (Server) 管理系统的访问权限                                 |\n| User enable {User id}                         |         |       | Admin       | 开启指定用户的服务器 (Server) 管理系统的访问权限                                 |\n| User priv {User id} {privilege level}         |         |       | Admin       | 设置指定用户的服务器 (Server) 管理系统访问权限                                   |\n\n## 用户权限管理\n\n### 用户权限操作命令\n\n| **命令**               | **权限级别** | **操作描述**                                                                 |\n|------------------------|--------------|------------------------------------------------------------------------------|\n| User disable {User id} | Admin        | 关闭指定用户的服务器 (Server)管理系统的访问权限                                 |\n| User enable {User id}  | Admin        | 开启指定用户的服务器 (Server)管理系统的访问权限                                 |\n| User priv {User id} {privilege level} | Admin        | 设置指定用户的服务器 (Server)管理系统访问权限                           |\n\n---\n\n## chassis selftest（获取服务器 (Server)系统自检结果）\n\n### 命令描述\n\n`chassis selftest` 命令用于获取服务器 (Server) 系统自检结果。\n\n| **属性**       | **说明**                                                                 |\n|----------------|--------------------------------------------------------------------------|\n| **权限级别**   | user                                                                     |\n| **命令示例**   | ```bash lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis selftest Self Test Results : passed ``` |\n\n---\n\n## chassis policy always-on/previous/always-off（设置服务器 (Server)系统电源 (Power Supply)恢复策略）\n\n### 命令描述\n\n`chassis policy` 命令用于设置服务器 (Server) 系统电源 (Power Supply) 恢复策略。支持以下三种策略：\n\n1. **always-on**：当服务器 (Server) 电源 (Power Supply) 接通后，系统会自动启动。\n2. **previous**：当服务器 (Server) 电源 (Power Supply) 接通后，系统恢复至电源 (Power Supply) 拔出前的状态。\n3. **always-off**：当服务器 (Server) 电源 (Power Supply) 接通后，系统保持关机状态。\n\n| **属性**       | **说明**                                                                 |\n|----------------|--------------------------------------------------------------------------|\n| **权限级别**   | operator                                                                |\n| **命令示例**   | ```bash lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis policy state <state>: list : return supported policies ``` |\n\n## chassis bootdev {device} （设置服务器 (Server) 的启动项）\n\n| Command Description   | chassis bootdev 命令用来设置服务器 (Server) 系统一次性启动选项。                                                                 |\n|-----------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| Privilege             | operator                                                                                                                               |\n\n## sol activate （激活 SOL 功能）\n\n| Command Description   | sol activate 命令用来激活 SOL 功能。                                                                                                   |\n|-----------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| Privilege             | administrator                                                                                                                         |\n| Command Example       | ```bash lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate usesolkeepalive [SOL Session operational. Use ~? for help] ``` |\n\n## Command Example\n\n| Command Example       | `-H [BMC_IP] -U USERID -P PASSW0RD -I`                                                                                                  |\n|-----------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n|                       | ```bash lenovo:~# ipmitool lanplus chassis policy state <state>: list : return supported policies ``` |\n\n        |\n|------|---------------------------------------------------------------------------|\n| 1    | User ID (范围: `01h` 到 `05h`)                                           |\n| 2    | Parameter (具体含义见下表)                                                |\n\n#### Parameter Definitions\n\n| Parameter Value | Description                                                                 |\n|-----------------|-----------------------------------------------------------------------------|\n| `01h`           | 使能状态 (`00h` - 禁用, `01h` - 启用)                                     |\n| `02h`           | 严重性 (`01h` - 严重, `02h` - 严重和警告, `03h` - 全部)               |\n| `03h`           | 版本 (`01h` - v1, `02h` - v2c, `03h` - v3)                               |\n| `04h`           | 模式 (具体值取决于实现)                                                 |\n| `05h`           | 社区字符串 (长度: 17 字节)                                              |\n| `06h`           | 用户名 (长度: 17 字节)                                                  |\n| `07h`           | 用户加密状态 (`00h` - 加密, `01h` - 非加密)                             |\n| `08h`           | 密码 (长度: 17 字节)                                                    |\n| `09h`           | 密码加密状态 (`00h` - 加密, `01h` - 非加密)                             |\n| `0Ah`           | 目标 IP 地址 (长度: 33 字节)                                            |\n| `0Bh`           | 端口号 (长度: 3 字节)                                                   |\n| `0Ch`           | LAN 通道 (长度: 2 字节)                                                 |\n| `0Dh`           | 进入 ID (长度: 33 字节)                                                 |\n\n### Response Data Format\n\n| Parameter Value | Byte | Data Field                                                                 |\n|-----------------|------|---------------------------------------------------------------------------|\n| `01h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `01h`           | 2    | 使能状态 (`00h` - 禁用, `01h` - 启用)                                 |\n| `02h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `02h`           | 2    | 严重性 (`01h` - 严重, `02h` - 严重和警告, `03h` - 全部)             |\n| `03h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `03h`           | 2    | 版本 (`01h` - v1, `02h` - v2c, `03h` - v3)                             |\n| `04h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `04h`           | 2    | 模式 (具体值取决于实现)                                               |\n| `05h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `05h`           | 2:17 | 社区字符串 (长度: 17 字节)                                            |\n| `06h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `06h`           | 2:17 | 用户名 (长度: 17 字节)                                                |\n| `07h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `07h`           | 2    | 用户加密状态 (`00h` - 加密, `01h` - 非加密)                           |\n| `08h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `08h`           | 2:17 | 密码 (长度: 17 字节)                                                  |\n| `09h`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `09h`           | 2    | 密码加密状态 (`00h` - 加密, `01h` - 非加密)                           |\n| `0Ah`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `0Ah`           | 2:33 | 目标 IP 地址 (长度: 33 字节)                                          |\n| `0Bh`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `0Bh`           | 2:3  | 端口号 (长度: 3 字节)                                                 |\n| `0Ch`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `0Ch`           | 2    | LAN 通道 (长度: 2 字节)                                               |\n| `0Dh`           | 1    | 完成码 (`00h` - 成功, 其他值表示错误)                                 |\n| `0Dh`           | 2:33 | 进入 ID (长度: 33 字节)                                               |\n\n### Command Example\n\n```bash\n# ipmitool -H 10.109.107.160 -U USERID -P PASSW0RD raw 0x30 0x02 01\n```\n\n### Notes\n\n- 该命令用于获取或设置 SNMP Trap 相关配置信息。\n- 参数值的具体含义请参考上表。\n- 完成码 (`00h`) 表示命令执行成功，其他值表示错误，需根据具体错误码进行排查。\n\nASSW0RD` |\n|-------------------------------------------------------------------------|-------------------------------------------------------------------------|-------------------------------------------------------------------------|\n\n### SET SNMPTRAPINFO (netfn=`0x30`, cmd=`0x03`)\n\n| Byte | Data Field                                                                                                                                         |\n|------|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1    | **User ID**: This value ranges from `01h` to `05h`.                                                                                               |\n| 2    | **Parameter** (values for different parameters):<br>`01h` - Enable<br>`02h` - Severity<br>`03h` - Version<br>`04h` - Mode<br>`05h` - Community<br>`06h` - User<br>`07h` - User Encrypt<br>`08h` - Password<br>`09h` - Pass Encrypt<br>`0Ah` - Destination IP<br>`0Bh` - Port<br>`0Ch` - LAN Channel<br>`0Dh` - Enter ID |\n| 3    | **Parameter Values**:<br>For parameter `01h` (Enable):<br>`00h` - Disable<br>`01h` - Enable<br>For parameter `02h` (Severity):<br>`01h` - Critical<br>`02h` - Critical and Warning<br>`03h` - All<br>For parameter `03h` (Version): |\n\n```markdown\n```', 'final_quality_score': 100.0, 'original_length': 14585, 'final_length': 13711, 'chinese_chars_final': 1069, 'technical_terms_final': 42, 'basic_quality': 100.0, 'enhancement_used': True, 'enhancement_quality': 1.0, 'vllm_chunks_processed': 5, 'total_processing_time': 0.04445910453796387, 'ready_for_stage3': True}
[2025-09-27T21:42:40.321+0000] {taskinstance.py:1138} INFO - Marking task as SUCCESS. dag_id=content_transformation, task_id=finalize_transformation_results, execution_date=20250927T214032, start_date=20250927T214240, end_date=20250927T214240
[2025-09-27T21:42:40.362+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2025-09-27T21:42:40.383+0000] {taskinstance.py:3280} INFO - 1 downstream tasks scheduled from follow-on schedule check

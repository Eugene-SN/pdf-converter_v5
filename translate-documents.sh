#!/bin/bash

# ===============================================================================
# PDF CONVERTER PIPELINE v2.0 - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î–ß–ò–ö –î–û–ö–£–ú–ï–ù–¢–û–í
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è+–ø–µ—Ä–µ–≤–æ–¥, –ø–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤—ã—Ö MD —Ñ–∞–π–ª–æ–≤
# ===============================================================================

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/.env"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
AIRFLOW_URL="${AIRFLOW_BASE_URL_HOST:-http://localhost:8090}"
AIRFLOW_USERNAME="${AIRFLOW_USERNAME:-admin}"
AIRFLOW_PASSWORD="${AIRFLOW_PASSWORD:-admin}"

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
HOST_INPUT_DIR="${SCRIPT_DIR}/input"
HOST_OUTPUT_ZH_DIR="${SCRIPT_DIR}/output/zh"
HOST_OUTPUT_RU_DIR="${SCRIPT_DIR}/output/ru"
HOST_OUTPUT_EN_DIR="${SCRIPT_DIR}/output/en"
LOGS_DIR="${SCRIPT_DIR}/logs"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$HOST_INPUT_DIR" "$HOST_OUTPUT_ZH_DIR" "$HOST_OUTPUT_RU_DIR" "$HOST_OUTPUT_EN_DIR" "$LOGS_DIR"

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${BLUE}[$timestamp]${NC} ${YELLOW}[$level]${NC} $message" | tee -a "$LOGS_DIR/translation_$(date +%Y%m%d_%H%M%S).log"
}

show_header() {
    echo -e "${CYAN}"
    echo "==============================================================================="
    echo " PDF CONVERTER PIPELINE v2.0 - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î–ß–ò–ö"
    echo "==============================================================================="
    echo -e "${NC}"
    echo "üåê –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
    echo "üìÇ –í—Ö–æ–¥–Ω—ã–µ PDF: $HOST_INPUT_DIR"
    echo "üìÇ –ò—Å—Ö–æ–¥–Ω—ã–µ MD: $HOST_OUTPUT_ZH_DIR"
    echo "üìÅ –†—É—Å—Å–∫–∏–π: $HOST_OUTPUT_RU_DIR"
    echo "üìÅ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: $HOST_OUTPUT_EN_DIR"
    echo ""
}

show_menu() {
    echo -e "${MAGENTA}=== –í–´–ë–ï–†–ò–¢–ï –°–¶–ï–ù–ê–†–ò–ô –†–ê–ë–û–¢–´ ===${NC}"
    echo ""
    echo -e "${GREEN}1.${NC} ${BLUE}–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –†—É—Å—Å–∫–∏–π${NC}"
    echo "   (–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ MD + –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π)"
    echo ""
    echo -e "${GREEN}2.${NC} ${BLUE}–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π${NC}"
    echo "   (–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ MD + –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)"
    echo ""
    echo -e "${GREEN}3.${NC} ${BLUE}–ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤–æ–≥–æ MD ‚Üí –†—É—Å—Å–∫–∏–π${NC}"
    echo "   (–ü–µ—Ä–µ–≤–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö MD —Ñ–∞–π–ª–æ–≤ –∏–∑ $HOST_OUTPUT_ZH_DIR)"
    echo ""
    echo -e "${GREEN}4.${NC} ${BLUE}–ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤–æ–≥–æ MD ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π${NC}"
    echo "   (–ü–µ—Ä–µ–≤–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö MD —Ñ–∞–π–ª–æ–≤ –∏–∑ $HOST_OUTPUT_ZH_DIR)"
    echo ""
    echo -e "${GREEN}5.${NC} ${BLUE}–¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF ‚Üí MD${NC}"
    echo "   (–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ $HOST_OUTPUT_ZH_DIR)"
    echo ""
    echo -e "${RED}0.${NC} ${YELLOW}–í—ã—Ö–æ–¥${NC}"
    echo ""
    echo -n -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-5): ${NC}"
}

check_services() {
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    local services=(
        "$AIRFLOW_URL/health:Airflow UI"
    )

    for service_info in "${services[@]}"; do
        local url="${service_info%:*}"
        local name="${service_info#*:}"
        if curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$url" > /dev/null 2>&1; then
            log "INFO" "‚úÖ $name –≥–æ—Ç–æ–≤"
        else
            local base="${url%/health}"
            local v2="${base}/api/v2/monitor/health"
            if ! curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$v2" > /dev/null 2>&1; then
                log "ERROR" "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $url"
                return 1
            fi
            log "INFO" "‚úÖ $name –≥–æ—Ç–æ–≤ (—á–µ—Ä–µ–∑ API v2)"
        fi
    done

    log "INFO" "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"
    return 0
}

# –°—Ü–µ–Ω–∞—Ä–∏–π 1 –∏ 2: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
full_pdf_processing() {
    local target_language="$1"
    local lang_name="$2"
    local output_dir="$3"

    log "INFO" "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF ‚Üí $lang_name"

    # –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤
    local pdf_files=()
    while IFS= read -r -d '' file; do
        pdf_files+=("$file")
    done < <(find "$HOST_INPUT_DIR" -name "*.pdf" -type f -print0)

    local total_files=${#pdf_files[@]}

    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ $HOST_INPUT_DIR"
        echo "–ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É $HOST_INPUT_DIR –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞"
        return 0
    fi

    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: $total_files"
    echo ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    local processed=0
    local failed=0
    local start_time
    start_time=$(date +%s)

    for pdf_file in "${pdf_files[@]}"; do
        local filename
        filename=$(basename "$pdf_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename ‚Üí $lang_name"

        if process_pdf_with_translation "$pdf_file" "$target_language" "$output_dir"; then
            ((processed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–í–ï–î–ï–ù${NC}"
        else
            ((failed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò${NC}"
        fi
        echo ""
    done

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local end_time
    end_time=$(date +%s)
    local total_duration=$((end_time - start_time))

    show_processing_results "$processed" "$failed" "$total_duration" "$lang_name" "$output_dir"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
process_pdf_with_translation() {
    local pdf_file="$1"
    local target_language="$2"
    local output_dir="$3"
    local filename
    filename=$(basename "$pdf_file")
    local timestamp
    timestamp=$(date +%s)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ orchestrator
    local config="{
        "input_file": "$pdf_file",
        "filename": "$filename",
        "timestamp": $timestamp,
        "target_language": "$target_language",
        "quality_level": "high",
        "enable_ocr": true,
        "preserve_structure": true,
        "extract_tables": true,
        "extract_images": true,
        "stage_mode": "full_with_translation",
        "processing_stages": 4,
        "validation_enabled": true,
        "quality_target": 95.0,
        "language": "zh-CN",
        "chinese_optimization": true,
        "pipeline_version": "4.0",
        "processing_mode": "digital_pdf",
        "use_orchestrator": true,
        "preserve_technical_terms": true
    }"

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ orchestrator
    local response
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "{"conf": $config}" \
        "$AIRFLOW_URL/api/v1/dags/orchestrator_dag/dagRuns")

    local http_code
    http_code=$(echo "$response" | tail -n1)
    local body
    body=$(echo "$response" | head -n -1)

    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id
        dag_run_id=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('dag_run_id', 'unknown'))" 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. Run ID: $dag_run_id"

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        wait_for_translation_completion "$dag_run_id" "$filename" "$target_language"
        return $?
    else
        log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: HTTP $http_code"
        return 1
    fi
}

# –°—Ü–µ–Ω–∞—Ä–∏–π 3 –∏ 4: –ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤—ã—Ö MD —Ñ–∞–π–ª–æ–≤
translate_existing_md() {
    local target_language="$1"
    local lang_name="$2"
    local output_dir="$3"

    log "INFO" "üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ç–æ–≤—ã—Ö MD —Ñ–∞–π–ª–æ–≤ ‚Üí $lang_name"

    # –ü–æ–∏—Å–∫ MD —Ñ–∞–π–ª–æ–≤
    local md_files=()
    while IFS= read -r -d '' file; do
        md_files+=("$file")
    done < <(find "$HOST_OUTPUT_ZH_DIR" -name "*.md" -type f -print0)

    local total_files=${#md_files[@]}

    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç MD —Ñ–∞–π–ª–æ–≤ –≤ $HOST_OUTPUT_ZH_DIR"
        echo "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PDF –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ MD —Ñ–∞–π–ª—ã –≤ $HOST_OUTPUT_ZH_DIR"
        return 0
    fi

    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: $total_files"
    echo ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    local processed=0
    local failed=0
    local start_time
    start_time=$(date +%s)

    for md_file in "${md_files[@]}"; do
        local filename
        filename=$(basename "$md_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename ‚Üí $lang_name"

        if translate_single_md "$md_file" "$target_language" "$output_dir"; then
            ((processed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–í–ï–î–ï–ù${NC}"
        else
            ((failed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê –ü–ï–†–ï–í–û–î–ê${NC}"
        fi
        echo ""
    done

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local end_time
    end_time=$(date +%s)
    local total_duration=$((end_time - start_time))

    show_processing_results "$processed" "$failed" "$total_duration" "$lang_name" "$output_dir"
}

# –ü–µ—Ä–µ–≤–æ–¥ –æ–¥–Ω–æ–≥–æ MD —Ñ–∞–π–ª–∞
translate_single_md() {
    local md_file="$1"
    local target_language="$2"
    local output_dir="$3"
    local filename
    filename=$(basename "$md_file")
    local timestamp
    timestamp=$(date +%s)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ç–æ–≤–æ–≥–æ MD
    local config="{
        "markdown_file": "$md_file",
        "filename": "$filename",
        "timestamp": $timestamp,
        "target_language": "$target_language",
        "stage_mode": "translation_only",
        "preserve_technical_terms": true,
        "chinese_source": true,
        "translation_method": "builtin_dictionary_v3",
        "use_orchestrator": false,
        "stage3_only": true
    }"

    # –ó–∞–ø—É—Å–∫ translation_pipeline –Ω–∞–ø—Ä—è–º—É—é
    local response
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "{"conf": $config}" \
        "$AIRFLOW_URL/api/v1/dags/translation_pipeline/dagRuns")

    local http_code
    http_code=$(echo "$response" | tail -n1)
    local body
    body=$(echo "$response" | head -n -1)

    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id
        dag_run_id=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('dag_run_id', 'unknown'))" 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω. Run ID: $dag_run_id"

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        wait_for_translation_completion "$dag_run_id" "$filename" "$target_language"
        return $?
    else
        log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: HTTP $http_code"
        return 1
    fi
}

# –°—Ü–µ–Ω–∞—Ä–∏–π 5: –¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
convert_only() {
    log "INFO" "üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF ‚Üí MD (–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞)"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    if [ -f "$SCRIPT_DIR/convert-pdf-to-markdown.sh" ]; then
        bash "$SCRIPT_DIR/convert-pdf-to-markdown.sh"
    else
        log "ERROR" "‚ùå –°–∫—Ä–∏–ø—Ç convert-pdf-to-markdown.sh –Ω–µ –Ω–∞–π–¥–µ–Ω"
        echo "–°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"
        return 1
    fi
}

wait_for_translation_completion() {
    local dag_run_id="$1"
    local filename="$2"
    local target_language="$3"
    local timeout=1800  # 30 –º–∏–Ω—É—Ç
    local start_time
    start_time=$(date +%s)

    log "INFO" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–∞–π–º–∞—É—Ç: ${timeout}s)..."

    while true; do
        local current_time
        current_time=$(date +%s)
        local elapsed=$((current_time - start_time))

        if [ $elapsed -gt $timeout ]; then
            log "ERROR" "‚ùå –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            return 1
        fi

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ DAG (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π DAG –ø—Ä–æ–≤–µ—Ä—è—Ç—å)
        local dag_name="orchestrator_dag"
        if [[ "$dag_run_id" == *"translation_pipeline"* ]]; then
            dag_name="translation_pipeline"
        fi

        local response
        response=$(curl -s \
            --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "$AIRFLOW_URL/api/v1/dags/$dag_name/dagRuns/$dag_run_id")

        local state
        state=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('state', 'unknown'))
except:
    print('error')
" 2>/dev/null || echo "error")

        case "$state" in
            "success")
                log "INFO" "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                return 0
                ;;
            "failed"|"upstream_failed")
                log "ERROR" "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π"
                return 1
                ;;
            "running")
                local progress_msg="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (${elapsed}s)"
                printf "\r${YELLOW}[–û–ë–†–ê–ë–û–¢–ö–ê]${NC} $progress_msg "
                sleep 10
                ;;
            *)
                sleep 5
                ;;
        esac
    done
}

show_processing_results() {
    local processed="$1"
    local failed="$2"
    local duration="$3"
    local lang_name="$4"
    local output_dir="$5"

    echo "==============================================================================="
    echo -e "${GREEN}–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ‚Üí $lang_name${NC}"
    echo "==============================================================================="
    echo -e "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo -e " –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${GREEN}$processed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e " –û—à–∏–±–æ–∫: ${RED}$failed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e " –û–±—â–µ–µ –≤—Ä–µ–º—è: ${BLUE}$duration${NC} —Å–µ–∫—É–Ω–¥"
    echo ""
    echo -e "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$output_dir${NC}"
    echo -e "üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$LOGS_DIR${NC}"
    echo ""

    if [ $failed -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –æ—à–∏–±–æ–∫:${NC}"
        echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
        echo " - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
        echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    else
        echo -e "${GREEN}üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    show_header

    if ! check_services; then
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d${NC}"
        exit 1
    fi

    while true; do
        echo ""
        show_menu
        read -r choice

        case $choice in
            1)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –†—É—Å—Å–∫–∏–π${NC}"
                full_pdf_processing "ru" "–†—É—Å—Å–∫–∏–π" "$HOST_OUTPUT_RU_DIR"
                ;;
            2)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π${NC}"
                full_pdf_processing "en" "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" "$HOST_OUTPUT_EN_DIR"
                ;;
            3)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–µ—Ä–µ–≤–æ–¥ MD ‚Üí –†—É—Å—Å–∫–∏–π${NC}"
                translate_existing_md "ru" "–†—É—Å—Å–∫–∏–π" "$HOST_OUTPUT_RU_DIR"
                ;;
            4)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–µ—Ä–µ–≤–æ–¥ MD ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π${NC}"
                translate_existing_md "en" "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" "$HOST_OUTPUT_EN_DIR"
                ;;
            5)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF ‚Üí MD${NC}"
                convert_only
                ;;
            0)
                echo -e "${YELLOW}–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
                ;;
        esac

        echo ""
        echo -e "${CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...${NC}"
        read -r
    done
}

# –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
